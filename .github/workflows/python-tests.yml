# .github/workflows/python-tests.yml

name: Python Sequential Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: healthsync_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      env:
        PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
      run: |
        python -m pip install --upgrade pip
        # Ensure all necessary packages, including pydantic and test helpers, are installed
        pip install pytest pytest-asyncio httpx sqlalchemy asyncpg pydantic pydantic-settings pytest-dotenv
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests sequentially per file
      # ***** THIS ENV BLOCK IS CRUCIAL *****
      env:
        # --- Database URLs ---
        # Map the auto-generated test DB URL to BOTH variables Pydantic might expect
        TEST_DATABASE_URL: postgresql+asyncpg://myuser:mypassword@localhost:5432/healthsync_db_test
        DATABASE_TEST_URI: postgresql+asyncpg://myuser:mypassword@localhost:5432/healthsync_db_test # Map it here too!
        # You MUST add DATABASE_URI as a GitHub Secret if your tests require it.
        # If tests DON'T need the main DB, consider making it optional in your Pydantic Settings model for the test environment.
        DATABASE_URI: ${{ secrets.DATABASE_URI }} # Assumes you created a secret named DATABASE_URI

        # --- Secrets (Pulled from GitHub Secrets) ---
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        DEBUG: ${{ secrets.DEBUG }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
        SMTP_FROM_NAME: ${{ secrets.SMTP_FROM_NAME }}

      run: |
        # List all test files and loop through them
        find tests -name 'test_*.py' -print0 | while IFS= read -r -d $'\0' test_file; do
          echo "======================================================"
          echo "Running test file: $test_file"
          echo "======================================================"
          # Run pytest with verbose output for the specific file
          pytest -v "$test_file"
          echo "Finished running $test_file"
          echo "" # Add a blank line for readability
        done
        echo "======================================================"
        echo "All test files executed."
        echo "======================================================"

