# .github/workflows/python-tests.yml

name: Python Sequential Tests

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Specify the Python versions you want to test against
        python-version: ['3.10'] # Add other versions if needed, e.g., ['3.9', '3.10', '3.11']

    # Service containers to run with the job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image - Use a specific version consistent with local if possible
        image: postgres:15
        env:
          POSTGRES_USER: myuser           # Updated user
          POSTGRES_PASSWORD: mypassword   # Updated password
          POSTGRES_DB: healthsync_db_test # Updated database name
        # Options for the health check
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the runner's localhost:5432
          # The tests inside the runner connect to localhost:5432
          - 5432:5432

    steps:
    #----------------------------------------------
    # Checkout Code
    #----------------------------------------------
    - name: Check out code
      uses: actions/checkout@v4

    #----------------------------------------------
    # Set up Python
    #----------------------------------------------
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    #----------------------------------------------
    # Install Dependencies
    #----------------------------------------------
    - name: Install dependencies
      env:
        # Set pip cache directory for faster builds
        PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    #----------------------------------------------
    # Run Tests Sequentially
    #----------------------------------------------
    - name: Run tests sequentially per file
      env:
        # Use the credentials and DB name matching the service container
        # The hostname is 'localhost' and port is '5432' as mapped by the service
        TEST_DATABASE_URL: postgresql+asyncpg://myuser:mypassword@localhost:5432/healthsync_db_test
        # Add any other environment variables your application/tests need
        # EXAMPLE_API_KEY: ${{ secrets.EXAMPLE_API_KEY }}
      run: |
        # List all test files and loop through them
        find tests -name 'test_*.py' -print0 | while IFS= read -r -d $'\0' test_file; do
          echo "======================================================"
          echo "Running test file: $test_file"
          echo "======================================================"
          # Run pytest with verbose output for the specific file
          pytest -v "$test_file"
          echo "Finished running $test_file"
          echo "" # Add a blank line for readability
        done
        echo "======================================================"
        echo "All test files executed."
        echo "======================================================"

